import { Combatant, CombatantStatus, Game } from "@client/game/game";

export const statusEffectEmojis: Record<keyof CombatantStatus, { icon: string }> = {
  health: { icon: `‚ù§` },
  block: { icon: `‚õä` },
  retaliation: { icon: `‚•É` },
  reflect: { icon: `‚Æé` },
  strength: { icon: `ü°Ö` },
  weak: { icon: `ü°á` },
  burning: { icon: "‚ô®Ô∏é" },
  wet: { icon: "‚òÇ" },
  oiled: { icon: "üå¢" },
  poisoned: { icon: "‚ò£" },
  stunned: { icon: "‚ö°Ô∏é" },
  regeneration: { icon: "‚úö" },
  doomed: { icon: "‚ò†" },
  haste: { icon: "‚ôû" },
  tactical: { icon: "‚ôö" },
  taunt: { icon: `‚öë` },
  fury: { icon: "‚Æô" },
  rage: { icon: "‚Æù" },
  warm: { icon: "üå°" },
  bleeding: { icon: "‚öï" },
  daggers: { icon: "‚öî" },
  defensive: { icon: "‚õ®" },
  protection: { icon: "‚ò•" },
  brittle: { icon: "‚úñ" },
  leech: { icon: "‚§Ω" },
  cold: { icon: "‚ùÖ" },
  frozen: { icon: "‚ùÜ" },
  exposed: { icon: "‚çü" },
  // inspiring: { icon: "‚ô´" },
  // resurrected: { icon: "‚úü" },
  // ranged: { icon: "‚û≥" },
  // a: { icon: "‚õØ" },
  // a: { icon: "‚õí" },
  // a: { icon: "‚õè" },
  // a: { icon: "‚õ¨" },
  // a: { icon: "‚õ∏" },
  // a: { icon: "‚õÜ" },
  // a: { icon: "‚ö†" },
  // a: { icon: "‚öñ" },
  // a: { icon: "‚ô¶" },
  // a: { icon: "‚öâ" },
  // a: { icon: "‚ôª" },
  // a: { icon: "‚öí" },
  // a: { icon: "‚ú∫" },
  // a: { icon: "‚ú∑" },
  // a: { icon: "‚ú∂" },
  // a: { icon: "‚ú¶" },
  // a: { icon: "‚ùÄ" },
  // a: { icon: "‚úø" },
  // a: { icon: "‚öò" },
  // a: { icon: "‚ù¶" },
  // a: { icon: "‚òÅ" },
  // a: { icon: "‚ö´Ô∏é" },
  // a: { icon: "‚õ∫Ô∏é" },
  // sun: { icon: "‚òÄ" },
  // lucky: { icon: "‚òò" },
  // shogi: { icon: "‚òó" },
  // bullseye: { icon: "‚óé" },
};

export function getStatusEffectEmojifiedString(actor: Combatant, game: Game) {
  const { health, ...props } = actor.status;
  const col = [`‚ù§${health}`];
  for (const [k, v] of Object.entries(props) as [keyof CombatantStatus, number][]) {
    const { icon = "?" } = statusEffectEmojis[k] || {};
    if (typeof v === "number" && v != 0) col.unshift(`${icon}${v}`);
    if (typeof v === "boolean") col.unshift(`${icon}`);
  }
  return col.join("\n");
}

export function getIntentionEmojifiedString(actor: Combatant, game: Game) {
  if (actor.nextCard) {
    const { type, value } = actor.nextCard;
    if (type === "atk") {
      const atk = game.calculateAttackPower(actor.nextCard, actor);
      return `‚öî${atk}`;
    }
    if (type === "def") {
      return `‚õä${value || "?"}`;
    }
    if (type === "func") {
      return `‚òÖ`;
    }
  }
  return "";
}
